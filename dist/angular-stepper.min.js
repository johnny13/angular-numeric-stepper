/*! angular-stepper - v0.0.1 - 2014-01-27
* Copyright (c) Julien Bouquillon [revolunet] 2014; Licensed  */
angular.module("revolunet.stepper",[]).directive("numericStepper",function(){return{restrict:"AE",require:"ngModel",scope:{min:"=",max:"=",stepBy:"="},template:'<span></span><div><button ng-disabled="isOverMax()" ng-click="increment()">+</button><button ng-disabled="isOverMin()" ng-click="decrement()">-</button></div>',link:function(a,b,c,d){function e(){var b=!(a.isOverMin(!0)||a.isOverMax(!0));d.$setValidity("outOfBounds",b)}function f(a){d.$setViewValue(d.$viewValue+a),d.$render()}d.$render=function(){b.find("span").text(d.$viewValue),e()},d.$formatters.push(function(a){return parseInt(a,10)}),d.$parsers.push(function(a){return parseInt(a,10)}),a.isOverMin=function(b){var c=b?0:a.stepBy;return angular.isDefined(a.min)&&d.$viewValue-c<parseInt(a.min,10)},a.isOverMax=function(b){var c=b?0:a.stepBy;return angular.isDefined(a.max)&&d.$viewValue+c>parseInt(a.max,10)},a.increment=function(){angular.isDefined(a.stepBy)&&!isNaN(Number(a.stepBy))&&f(+Number(a.stepBy))},a.decrement=function(){angular.isDefined(a.stepBy)&&!isNaN(Number(a.stepBy))&&f(-Number(a.stepBy))},e(),a.$watch("min+max",function(){e()})}}}),describe("rnStepper directive",function(){function a(a){a||(a='<div rn-stepper ng-model="testModel"></div>'),a='<form name="form">'+a+"</form>",inject(function(d){var e=d(a)(c);b=e.find("div")}),c.$digest()}var b,c;beforeEach(module("revolunet.stepper")),beforeEach(inject(function(a){c=a.$new(),c.testModel=42})),describe("initialisation",function(){beforeEach(function(){a()}),it("should produce 2 buttons and a div",function(){expect(b.find("button").length).toEqual(2),expect(b.find("div").length).toEqual(1)}),it("should check validity on init",function(){expect(c.form.$valid).toBeTruthy()})}),describe("bounds detection for MIN",function(){it("should update form validity initialy",function(){c.testMin=45,a('<div rn-stepper min="testMin" ng-model="testModel"></div>'),expect(c.form.$valid).toBeFalsy()}),it("should expose isOverMin method on the isolated scope",function(){a(),expect(b.isolateScope().isOverMin).toBeDefined()}),it("isOverMin method should return false when no min defined",function(){a(),expect(b.isolateScope().isOverMin()).toBeFalsy()}),it("isOverMin method should return false when min not reached",function(){a('<div rn-stepper min="40" ng-model="testModel"></div>'),expect(b.isolateScope().isOverMin()).toBeFalsy()}),it("isOverMin method should return true when min reached",function(){a('<div rn-stepper min="45" ng-model="testModel"></div>'),expect(b.isolateScope().isOverMin()).toBeTruthy()}),it("decrease button should be disabled when min reached.",function(){a('<div rn-stepper min="40" ng-model="testModel"></div>'),expect(b.find("button").attr("disabled")).not.toBeDefined(),c.testModel=40,c.$digest(),expect(b.find("button").attr("disabled")).toEqual("disabled")}),it("min can be updated dynamically and update button disabled status",function(){c.testMin=42,a('<div rn-stepper min="testMin" ng-model="testModel"></div>'),expect(b.find("button").attr("disabled")).toEqual("disabled"),c.testMin=40,c.$digest(),expect(b.find("button").attr("disabled")).not.toBeDefined()})}),describe("bounds detection for MAX",function(){it("should update form validity initialy",function(){c.testMax=40,a('<div rn-stepper max="testMax" ng-model="testModel"></div>'),expect(c.form.$valid).toBeFalsy()}),it("should expose isOverMax method on the isolated scope",function(){a(),expect(b.isolateScope().isOverMax).toBeDefined()}),it("isOverMax method should return false when no max defined",function(){a(),expect(b.isolateScope().isOverMax()).toBeFalsy()}),it("isOverMax method should return false when max not reached",function(){a('<div rn-stepper max="50" ng-model="testModel"></div>'),expect(b.isolateScope().isOverMax()).toBeFalsy()}),it("isOverMax method should return true when max reached",function(){a('<div rn-stepper max="35" ng-model="testModel"></div>'),expect(b.isolateScope().isOverMax()).toBeTruthy()}),it("decrease button should be disabled when max reached.",function(){a('<div rn-stepper max="45" ng-model="testModel"></div>'),expect(angular.element(b.find("button")[1]).attr("disabled")).not.toBeDefined(),c.testModel=45,c.$digest(),expect(angular.element(b.find("button")[1]).attr("disabled")).toEqual("disabled")}),it("max can be updated dynamically and update button disabled status",function(){c.testMax=42,a('<div rn-stepper max="testMax" ng-model="testModel"></div>'),expect(angular.element(b.find("button")[1]).attr("disabled")).toEqual("disabled"),c.testMax=50,c.$digest(),expect(angular.element(b.find("button")[1]).attr("disabled")).not.toBeDefined()})}),describe("ngModel integration",function(){it("should update form validity when min changes",function(){c.testMin=40,a('<div rn-stepper min="testMin" ng-model="testModel"></div>'),expect(c.form.$valid).toBeTruthy(),c.testMin=45,c.$digest(),expect(c.form.$valid).toBeFalsy()}),it("should update form validity when max changes",function(){c.testMax=50,a('<div rn-stepper max="testMax" ng-model="testModel"></div>'),expect(c.form.$valid).toBeTruthy(),c.testMax=35,c.$digest(),expect(c.form.$valid).toBeFalsy()}),it("should update form validity when model changes",function(){c.testMin=40,a('<div rn-stepper min="testMin" ng-model="testModel"></div>'),expect(c.form.$valid).toBeTruthy(),c.testModel=35,c.$digest(),expect(c.form.$valid).toBeFalsy()})}),describe("increment",function(){it("should increment model value",function(){a(),b.isolateScope().increment(),expect(c.testModel).toEqual(43)}),it("should update view",function(){a(),b.isolateScope().increment(),expect(b.find("div").html()).toEqual("43")}),it("should update form dirty state",function(){a(),expect(c.form.$dirty).toBeFalsy(),b.isolateScope().increment(),expect(c.form.$dirty).toBeTruthy()})}),describe("decrement",function(){it("should decrement model value",function(){a(),b.isolateScope().decrement(),expect(c.testModel).toEqual(41)}),it("should update view",function(){a(),b.isolateScope().decrement(),expect(b.find("div").html()).toEqual("41")}),it("should update form dirty state",function(){a(),expect(c.form.$dirty).toBeFalsy(),b.isolateScope().decrement(),expect(c.form.$dirty).toBeTruthy()})})});